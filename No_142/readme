1.散列表法，用散列表存储遍历过的节点，每向后遍历一个节点，就到散列表中查找有无该节点
散列表的空间复杂度为O(n)，时间复杂度为O(1)
算法时间复杂度为O(n),空间复杂度为O(n)

2.双指针法:
步骤1：找到快慢指针第一次相遇的位置
步骤2：一个指针从相遇位置开始，另一个指针从head位置开始以相同速度移动，相遇点即为循环链表开始位置
证明：
F:从head到循环开始结点间的距离
a:从循环开始结点到快慢指针第一次相遇结点顺时针距离
b:快慢指针第一次相遇结点到循环开始结点顺时针距离
通过解方程：2 * (F + a + n1*(a+b)) = F + a + (a+b) + n2*(a+b)
得到：F = (n2-2*n1)*(a+b) + b,即F与b相差0，1，2...圈，但是最终会在第一次相遇点汇合。
思路本质：快指针至少比慢指针快一圈。